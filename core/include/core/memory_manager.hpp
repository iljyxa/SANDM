#ifndef MEMORY_MANAGER_HPP
#define MEMORY_MANAGER_HPP

// ReSharper disable once CppUnusedIncludeDirective
#include <limits>
// ReSharper disable once CppUnusedIncludeDirective
#include <stdexcept>
#include <vector>

#include "core/common_definitions.hpp"

/**
 * @class MemoryManager
 * @brief Класс для управления памятью.
 */
class MemoryManager {
public:
    MemoryManager() = default;

    /**
     * @brief Загружает байт-код в память менеджера.
     *
     * Метод парсит переданный байт-код, проверяет его корректность и загружает инструкции и аргументы в соответствующие структуры данных.
     *
     * @param byte_code Байт-код, содержащий последовательность инструкций и аргументов, представленный в виде контейнера snm::ByteCode.
     *                  Каждый блок байт-кода должен иметь длину кратную 5, где первый байт представляет код инструкции, а оставшиеся 4 байта представляют аргумент инструкции.
     * @throws std::invalid_argument Если размер байт-кода превышает максимально допустимый размер памяти или формат байт-кода некорректен.
     */
    void Load(const snm::ByteCode& byte_code);

    /**
     * @brief Записывает инструкцию в память по указанному адресу.
     *
     * Метод записывает код инструкции и соответствующий аргумент в структуру данных,
     * хранящую инструкции.
     *
     * @param code Код инструкции, представленный в виде объекта snm::Byte.
     * @param argument Аргумент инструкции, представленный в виде контейнера snm::Bytes.
     * @param address Адрес памяти, по которому нужно записать инструкцию и аргумент.
     */
    void WriteInstruction(snm::Byte code, snm::Bytes argument, snm::Address address);
    /**
     * @brief Записывает инструкцию в память.
     *
     * Метод добавляет код инструкции и связанный с ним аргумент в соответствующие структуры данных,
     * хранящие инструкции.
     *
     * @param code Код инструкции, представленный в виде объекта snm::Byte.
     * @param argument Аргумент инструкции, представленный в виде контейнера snm::Bytes.
     */
    void WriteInstruction(snm::Byte code, snm::Bytes argument);
    /**
     * @brief Читает инструкцию и её аргумент из памяти по указанному адресу.
     *
     * Метод извлекает опкод команды и соответствующие ей аргументы из памяти.
     * Возвращает пару, где первый элемент — это байт с опкодом инструкции,
     * а второй элемент — это вектор байтов, представляющий аргументы команды.
     *
     * @param address Адрес в памяти, откуда требуется прочитать инструкцию и её аргументы.
     *                Адрес должен быть допустимым и находиться в пределах доступного диапазона памяти.
     *
     * @return Пара, содержащая опкод команды и её аргументы. Первый элемент — это байт с опкодом,
     *         второй элемент — вектор байтов, представляющий аргументы команды.
     *
     * @throws std::out_of_range Если адрес выходит за пределы доступной памяти или память пуста.
     */
    std::pair<snm::Byte, snm::Bytes> ReadInstruction(snm::Address address);

    /**
     * @brief Записывает данные аргумента в память по указанному адресу.
     *
     * Метод проверяет, что адрес памяти допустим, и при необходимости расширяет структуру данных, хранящую аргументы.
     * Затем сохраняет переданный аргумент по указанному адресу.
     *
     * @param argument Данные аргумента, представленные в виде контейнера snm::Bytes.
     * @param address Адрес памяти, в который записываются данные аргумента.
     */
    void WriteArgument(snm::Bytes argument, snm::Address address);
    /**
     * @brief Читает аргумент из памяти по указанному адресу.
     *
     * Проверяет доступность аргумента по заданному адресу и возвращает его,
     * если адрес валиден. Если адрес выходит за пределы списка аргументов
     * или список аргументов пуст, возвращается пустой результат.
     *
     * @param address Адрес, по которому необходимо прочитать аргумент.
     * @return Аргумент, расположенный по указанному адресу, или пустой результат, если
     *         адрес невалиден.
     */
    [[nodiscard]] snm::Bytes ReadArgument(snm::Address address) const;

    /**
     * @brief Сбрасывает состояние памяти менеджера.
     *
     * Метод очищает внутренние структуры данных класса, включая списки инструкций и аргументов,
     * возвращая память менеджера в изначальное пустое состояние.
     */
    void Reset();
    /**
     * @brief Сбрасывает данные аргументов памяти на исходное состояние.
     *
     * Метод восстанавливает текущие данные аргументов до их оригинального состояния,
     * используя сохранённую копию исходных данных, которая была получена после метода Load.
     */
    void ResetData();
    /**
     * @brief Возвращает количество инструкций, управляемых объектом MemoryManager.
     * @return Размер в виде количества инструкций.
     */
    [[nodiscard]] size_t Size() const;

private:
    std::vector<snm::Byte> opcodes_; ///< Коды операций. Индекс соответствует адресу.
    std::vector<snm::Bytes> arguments_; ///< Аргументы операций. Индекс соответствует адресу.
    std::vector<snm::Bytes> arguments_original_; ///< Исходные аргументы операций, заполненные при Load. Используется при частичном сбросе.
};

#endif

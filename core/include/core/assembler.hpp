#ifndef ASSEMBLER_HPP
#define ASSEMBLER_HPP

#include <algorithm>
// ReSharper disable once CppUnusedIncludeDirective
#include <cstdint>
#include <format>
// ReSharper disable once CppUnusedIncludeDirective
#include <numeric>
#include <regex>
// ReSharper disable once CppUnusedIncludeDirective
#include <set>
#include <sstream>
#include <string>
#include <unordered_map>
#include <vector>

#include "core/common_definitions.hpp"

/**
 * @brief Структура, представляющая инструкцию для преобразования в байт-код.
 *
 * Instruction содержит основные поля, описывающие один шаг инструкции, включая
 * операцию (opcode), модификаторы типа и аргументов, значение аргумента,
 * возможность использования ярлыков для указания на адреса или названия,
 * а также номер строки исходного кода.
 */
struct Instruction {
    snm::OpCode opcode = snm::OpCode::NOPE; ///< Команда
    snm::ArgModifier argument_modifier = snm::ArgModifier::NONE; ///< Модификатор адреса
    snm::TypeModifier type_modifier = snm::TypeModifier::SW; ///< Модификатор типа
    std::optional<snm::Bytes> argument{}; ///< Значение аргумента команды
    std::optional<std::string> using_label_name; ///< Имя метки, используемой в качестве аргумента
    std::optional<std::string> label_name; ///< Имя метки этой инструкции
    unsigned int line_number = 0; ///< Номер строки в исходном коде
};

/**
 * @brief Класс, реализующий ассемблер для компиляции исходного кода в байт-код.
 *
 * Ассемблер предоставляет функционал для преобразования текстового исходного
 * кода в байт-код с возможностью проверки его целостности и корректности, а
 * также получения отладочной информации о процессе компиляции.
 */
class Assembler {
public:
    Assembler();

    /**
     * @brief Компилирует исходный код в байт-код.
     *
     * Метод принимает исходный код программы в виде строки, выполняет его разбор
     * и преобразует в последовательность байт, представляющих байт-код, который
     * соответствует инструкциям виртуальной машины или целевого процессора.
     *
     * @param source Исходный код для компиляции, представленный в виде строки.
     * @return Байт-код, полученный в результате компиляции исходного кода.
     */
    snm::ByteCode Compile(const std::string& source);
    /**
     * @brief Компилирует исходный код в байт-код с отладочной информацией.
     *
     * Метод принимает исходный код программы, выполняет его разбор и преобразует
     * в байт-код, сопровождаемый картой соответствий между строками исходного кода
     * и адресами байт-кода. Это позволяет установить связь между исходным кодом
     * и его представлением в байт-коде, что полезно для отладки.
     *
     * @param source Исходный код для компиляции, представленный в виде строки.
     * @return Пара, содержащая байт-код программы и карту соответствий
     * строк исходного кода адресам байт-кода.
     */
    std::pair<snm::ByteCode, snm::SourceToBytecodeMap> CompileWithDebugInfo(const std::string& source);
    /**
     * @brief Проверяет исходный код на наличие ошибок.
     *
     * Метод принимает исходный код в формате строки, выполняет его синтаксический
     * разбор и возвращает список обнаруженных ошибок. Если ошибок нет, возвращается
     * пустой список. Этот метод полезен для анализа и диагностики перед компиляцией
     * или выполнения исходного кода.
     *
     * @param source Исходный код, представленный в виде строки.
     * @return Список строк с описаниями ошибок, найденных в исходном коде.
     * Если ошибок не обнаружено, возвращается пустой список.
     */
    std::vector<std::string> TestSource(const std::string& source);

private:
    std::unordered_map<std::string, snm::OpCode> opcode_map_;
    ///< Соответствие строковых имен команд в верхнем регистре перечислению
    std::unordered_map<std::string, snm::TypeModifier> type_modifier_map_;
    ///< Соответствие строковых имен модификаторов типов в верхнем регистре перечислению
    std::unordered_map<std::string, snm::ArgModifier> arg_modifier_map_;
    ///< Соответствие строковых имен модификаторов адресов в верхнем регистре перечислению
    unsigned int line_number_; ///< Номер текущей обрабатываемой строки в исходном коде

    /**
     * @brief Исключение, связанное с работой ассемблера.
     *
     * Создает объект исключения с заданным сообщением об ошибке.
     *
     * @param message Сообщение, описывающее причину исключения.
     * @return Объект исключения указанного типа T.
     */
    template <class T>
    T Exception(const std::string& message);
    /**
     * @brief Исключение, связанное с определенной строкой исходного кода.
     *
     * Создает объект исключения с заданным сообщением и номером строки кода, где
     * произошло исключение. Это помогает идентифицировать и локализовать ошибочные
     * участки в исходном коде при его обработке.
     *
     * @param message Сообщение об ошибке, указывающее на причину исключения.
     * @param line_number Номер строки исходного кода, связанный с исключением.
     * @return Объект исключения указанного типа T, содержащий сообщение и информацию
     * о строке кода.
     */
    template <class T>
    static T Exception(const std::string& message, unsigned int line_number);

    /**
     * @brief Удаляет начальные и конечные пробелы, а также избыточные пробельные символы
     * внутри строки.
     *
     * Метод обрезает лишние пробелы и табуляции с начала и конца строки, а также заменяет
     * последовательности пробельных символов внутри строки на один пробел. Это позволяет
     * получить строку в упрощённом формате без лишних пробелов.
     *
     * @param str Исходная строка, из которой требуется удалить лишние пробелы.
     * @return Результирующая строка с удалёнными начальными, конечными и избыточными
     * пробельными символами.
     */
    static std::string Trim(const std::string& str);
    /**
     * @brief Проверяет, является ли заданное имя допустимым именем метки.
     *
     * Метод проверяет, соответствует ли строка правилам именования меток, включая
     * то, что метка должна начинаться с буквы или символа подчеркивания, а также
     * не содержать недопустимых символов.
     *
     * @param name Строка, представляющая имя метки, которое требуется проверить.
     * @return true, если имя соответствует правилам именования меток;
     *         false, если имя недопустимо.
     */
    static bool IsValidLabelName(const std::string& name);
    /**
     * @brief Проверяет, является ли переданная строка допустимым символом.
     *
     * Метод определяет, соответствует ли строка формату символьной литералы,
     * содержащей ровно три символа, где первый и последний символы — это
     * одиночные кавычки, а средний символ — сам символ.
     *
     * @param token Строка, представляющая предполагаемый символьный литерал.
     * @return true, если строка является допустимым символом; false в противном случае.
     */
    static bool IsValidChar(const std::string& token) ;
    /**
     * @brief Проверяет, является ли значение допустимым для заданного модификатора типа.
     *
     * Метод осуществляет валидацию значения в зависимости от типа модификатора,
     * чтобы убедиться, что значение находится в пределах допустимого диапазона
     * для этого типа.
     *
     * @param bytes Значение, представленное в виде последовательности байтов.
     * @param type_modifier Модификатор типа, определяющий, какой тип значения проверяется.
     * @return true, если значение допустимо для указанного модификатора типа, иначе false.
     */
    static bool IsNumberValidForType(snm::Bytes bytes, snm::TypeModifier type_modifier);
    /**
     * @brief Преобразует числовую строку в представление в байтах.
     *
     * Метод принимает строку, представляющую число в разных форматах (двоичный, шестнадцатеричный или десятичный),
     * производит ее валидацию, преобразует в число заданного типа и возвращает результат в виде массива байтов.
     *
     * @param str Строка, содержащая числовое значение (может быть представлена в формате "0b" для двоичного числа,
     * "0x" для шестнадцатеричного числа, или как обычное десятичное число).
     * @param type_modifier Модификатор типа, определяющий формат числа. Например, используется для указания,
     * является ли число с плавающей запятой, если требуется.
     * @return snm::Bytes Результат преобразования числа в виде массива байтов.
     * @throws std::invalid_argument Если строка содержит некорректное или слишком длинное число.
     */
    snm::Bytes ParseNumber(const std::string& str, const snm::TypeModifier& type_modifier);
    /**
     * @brief Считывает и обрабатывает строку из входного потока, удаляя комментарии и лишние пробелы.
     *
     * Метод извлекает строку из переданного потока, увеличивает счётчик строк,
     * удаляет комментарии и внешние пробелы. Если строка не пустая после обработки, она возвращается.
     *
     * @param stream Входной поток, содержащий строки данных для обработки.
     * @return Обработанная строка без комментариев и лишних пробелов. Если строка пуста после обработки,
     * метод продолжает чтение, пока не найдет непустую строку или поток не закончится.
     */
    std::string GetLine(std::istringstream& stream);
    /**
     * @brief Преобразует строку текста в объект Instruction, содержащий данные об инструкции.
     *
     * Метод разбирает строку, содержащую инструкцию, и создает объект Instruction,
     * который инкапсулирует всю необходимую информацию о команде, её аргументах,
     * модификаторах и связанных метках. В случае некорректного формата строки
     * может выбросить исключение.
     *
     * @param line Строка, содержащая текстовую инструкцию для разбора.
     * @return Объект Instruction, содержащий все данные, связанные с данной инструкцией.
     * @throws std::runtime_error Если строка имеет некорректный формат или содержит
     * невалидные элементы.
     */
    Instruction GetInstruction(const std::string& line);
    /**
     * @brief Разбирает модификаторы инструкции из входного потока.
     *
     * Метод анализирует входной поток, определяет и назначает типовые и аргументные
     * модификаторы для заданной инструкции. При необходимости использует значения
     * по умолчанию для модификаторов типа. В случае недопустимости указанного
     * модификатора выбрасывается исключение.
     *
     * @param stream Входной поток, содержащий текстовые представления модификаторов.
     * @param instr Инструкция, для которой будут назначены модификаторы.
     */
    void ParseModifiers(std::istringstream& stream, Instruction& instr);
    /**
     * @brief Парсит аргумент инструкции из входящего потока и обновляет указанный объект инструкции.
     *
     * Метод обрабатывает входной поток, извлекает следующий токен, проверяет его корректность
     * как имени ярлыка, символа или числа, и обновляет поля объекта инструкции в соответствии
     * с результатами.
     *
     * @param stream входной поток, содержащий строковое представление инструкций для парсинга.
     * @param instr объект инструкции, который будет обновлен в зависимости от результата обработки.
     */
    void ParseArgument(std::istringstream& stream, Instruction& instr);
    /**
     * @brief Проверяет, является ли указанный токен модификатором аргумента.
     *
     * Метод определяет, представляет ли строковый токен модификатор аргумента,
     * используя внутреннее сопоставление ключей и преобразование текста в верхний регистр.
     *
     * @param token Строка, содержащая токен, который может быть модификатором аргумента.
     * @return true, если токен является модификатором аргумента, иначе false.
     */
    [[nodiscard]] bool IsArgumentModifier(std::string& token) const;
    /**
     * @brief Проверяет, является ли переданный токен модификатором типа.
     *
     * Метод осуществляет проверку, содержится ли переданный токен в карте модификаторов типов.
     * Токен предварительно преобразуется к верхнему регистру перед проверкой.
     *
     * @param token Ссылка на строку, представляющую токен для проверки.
     * @return Возвращает true, если токен является модификатором типа, иначе false.
     */
    [[nodiscard]] bool IsTypeModifier(std::string& token) const;
    /**
     * @brief Валидирует строку, представляющую число в различных форматах.
     *
     * Метод проверяет строку на соответствие одному из поддерживаемых форматов чисел:
     * двоичный, шестнадцатеричный, с плавающей точкой и целое число. Если строка
     * не соответствует ни одному из форматов, выбрасывается исключение с описанием
     * причины недопустимости строки.
     *
     * @param str Строка, представляющая число, подлежащее проверке.
     *            Формат может быть: двоичным (с префиксом "0b"),
     *            шестнадцатеричным (с префиксом "0x"),
     *            с плавающей точкой (содержит один символ '.'),
     *            либо целым числом.
     *
     * @throws std::invalid_argument Если строка не соответствует ни одному из поддерживаемых форматов чисел.
     */
    void ValidateStringNumber(const std::string& str);
    /**
     * @brief Удаляет комментарий из строки кода.
     *
     * Метод ищет комментарий, начинающийся с "//", и возвращает часть строки,
     * находящуюся перед ним. Если комментария в строке нет, возвращается исходная строка.
     *
     * @param line Строка кода, из которой требуется удалить комментарий.
     * @return Строка без части, содержащей комментарий, или исходная строка,
     *         если комментария нет.
     */
    static std::string RemoveComment(const std::string& line);
    /**
     * @brief Преобразует все символы строки в верхний регистр.
     *
     * Метод выполняет преобразование всех символов в переданной строке в их
     * заглавный эквивалент.
     *
     * @param str Ссылка на строку, которую необходимо преобразовать в верхний регистр.
     * @return Преобразованная строка, где все символы приведены к верхнему регистру.
     */
    static std::string ToUpper(std::string& str);
    /**
     * @brief Компилирует исходный код в байт-код и создает карту соответствий между строками исходного кода и байт-кодом.
     *
     * Метод парсит переданный исходный код, преобразует его в машину байт-кода, обрабатывает метки,
     * и возвращает пару, состоящую из скомпилированного байт-кода и карты соответствий строк исходного
     * кода к байт-кодам.
     *
     * @param source Строка, представляющая исходный код программы, который нужно скомпилировать.
     * @return Пара, содержащая скомпилированный байт-код и карту сопоставлений строк исходного кода с байт-кодом.
     * @throw std::runtime_error В случае наличия ошибок в процессе парсинга исходного кода.
     */
    std::pair<snm::ByteCode, snm::SourceToBytecodeMap> CompileInternal(const std::string& source);
    /**
     * @brief Парсит исходный код ассемблера и преобразует его в список инструкций.
     *
     * Метод анализирует переданный текстовый исходный код, создает инструкции,
     * собирает адреса меток и фиксирует возможные ошибки парсинга.
     *
     * @param source Исходный код ассемблера в текстовом формате.
     * @return Кортеж, содержащий:
     *         - список инструкций (std::vector<Instruction>),
     *         - отображение адресов меток (std::unordered_map<std::string, uint32_t>),
     *         - список ошибок (std::vector<std::string>).
     */
    std::tuple<std::vector<Instruction>, std::unordered_map<std::string, snm::Address>, std::vector<std::string>>
    ParseSource(
        const std::string& source);
};



#endif
